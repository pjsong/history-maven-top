<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:p="http://cxf.apache.org/policy" xmlns:ss="http://www.springframework.org/schema/security"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
   	http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd 
   	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd 
   	http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
   	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
   	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
   	http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd 
   	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd 
   	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
   	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
   	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:component-scan base-package="controller" />
	<mvc:annotation-driven />

	<bean id="webPropertyConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/setting-web.properties</value>
			</list>
		</property>
		<property name="placeholderPrefix" value="@{" />
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	</bean>


	<!--===================== view resovler ===================== -->
	<bean id="viewResolver" abstract="true">
		<property name="attributes">
			<props>
				<!-- <prop key="resRoot">@{resRoot}</prop> -->
				<!-- <prop key="minSuffix">@{minSuffix}</prop> -->
				<!-- <prop key="versionNo">@{appVersion}</prop> -->
				<!-- <prop key="buildNo">@{buildNo}</prop> -->
				<!-- <prop key="imgHost">@{imgHost}</prop> -->
				<!-- <prop key="imgHostTag">@{imgHostTag}</prop> -->
				<!-- <prop key="imgHostNumber">@{imgHostNumber}</prop> -->
			</props>
		</property>
	</bean>

	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer" >
	<property name="templateLoaderPath" value="/WEB-INF/views/ftl/" />
	</bean>
	<bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewNames">
			<array>
				<value>*.ftl</value>
			</array>
		</property>
		<property name="contentType" value="text/html;charset=utf-8" /><!--编码 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="order" value="1" /><!-- the order in which this ViewResolver is evaluated -->
		<property name="cache" value="true" />
		<property name="prefix" value="WEB-INF/views/ftl/" />
		<property name="suffix" value=".ftl" />
	</bean>
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />
	<bean id="fmHtmlEscape" class="freemarker.template.utility.HtmlEscape" />


<!-- 	<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer"> -->
<!-- 		<property name="resourceLoaderPath" value="/WEB-INF/views/vm/" /> -->
<!-- 	</bean> -->
	<bean id="velocityResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="order" value="2"/>
		<property name="viewNames">
			<array>
				<value>*</value>
			</array>
		</property>
		<property name="viewClass" value="org.springframework.web.servlet.view.velocity.VelocityView" />
		<property name="cache" value="true" />
		<property name="prefix" value="/WEB-INF/views/vm/" />
<!-- 		suffix is no longer needed since viewNames has been set for automatic viewResolver match, or the default view name would be .jsp.jsp -->
		<property name="suffix" value=".vm" />
	</bean>



	<bean id="jspResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="3"/>
		<property name="viewNames">
			<array>
<!-- 			to make multiple viewResolver to work, "viewNames" will be matched by the url, with slash/backslash stripped -->
				<value>*</value>
			</array>
		</property>
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="WEB-INF/views/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
<!-- Excel views are not supported by the InternalResourceViewResolver, -->
<!-- If a specific view resolver does not result in a view, Spring examines the context for other view resolvers.  -->
<!-- If additional view resolvers exist, Spring continues to inspect them until a view is resolved. If no view resolver returns a view, Spring throws a ServletException -->
<!-- 	<bean id="excelViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver"> -->
<!-- 		<property name="order" value="1" /> -->
<!-- 		<property name="location" value="/WEB-INF/views.xml" /> -->
<!-- 	</bean> -->
<!-- 	<beans> -->
<!-- 		<bean name="report" class="org.springframework.example.ReportExcelView" /> -->
<!-- 	</beans> -->

	<!-- mix different view technologies, refer to views.properties, If you need different view resolving based on Locale, you 
		have to use the resource bundle resolver. -->
	<!-- <bean id="resourceBundleViewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"> -->
	<!-- <property name="basename" value="/conf/spring/views" /> -->
	<!-- </bean> -->
	
<!-- 	generating a logical view name from the URL of the request -->
<!-- You do not need to define a DefaultRequestToViewNameTranslator bean explicitly. If you like the default settings -->
	    <bean id="viewNameTranslator" class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator">
	    		<property name="stripExtension" value="false"/>
	    </bean>
	    
        <!-- maps request URLs to Controller names, registration.html will trigger RegistrationController, and return registration.jsp,registration.vm... -->
    	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/>
    	
    	
</beans>